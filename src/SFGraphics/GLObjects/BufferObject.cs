using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using System.Runtime.InteropServices;
using System.Drawing.Imaging;
using System.Diagnostics;

namespace SFGraphics.GLObjects
{
    /// <summary>
    /// Encapsulates an OpenGL buffer object. Like other GLOBjects, memory is handled by GLObjectManager.
    /// </summary>
    public class BufferObject : IGLObject
    {
        /// <summary>
        /// The value generated by GL.GenBuffer(). Do not attempt to bind this when the object has gone out of scope.
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// The target to which the buffer is bound when calling Bind().
        /// </summary>
        public BufferTarget BufferTarget { get { return bufferTarget; } }
        private BufferTarget bufferTarget;

        /// <summary>
        /// Creates and binds an empty buffer of the specified target.
        /// </summary>
        public BufferObject(BufferTarget bufferTarget)
        {
            Id = GL.GenBuffer();
            GLObjectManager.AddReference(GLObjectManager.referenceCountByBufferId, Id);
            this.bufferTarget = bufferTarget;
            GL.BindBuffer(BufferTarget, Id);
        }

        /// <summary>
        /// Decrement the reference count for this ID. The context probably isn't current, so the data is deleted later by GLObjectManager.
        /// </summary>
        ~BufferObject()
        {
            GLObjectManager.RemoveReference(GLObjectManager.referenceCountByBufferId, Id);
        }

        /// <summary>
        /// Binds the buffer to the target specified at creation.
        /// </summary>
        public void Bind()
        {
            GL.BindBuffer(BufferTarget, Id);
        }
    }
}
