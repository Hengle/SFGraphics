using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Drawing;
using System.Drawing.Imaging;
using OpenTK;
using OpenTK.Graphics.OpenGL;


namespace SFGraphics.GLObjects.Textures
{
    /// <summary>
    /// 
    /// </summary>
    public abstract class Texture : IGLObject
    {
        // The finalizers and actual deletion won't be on the same thread.
        private static ConcurrentDictionary<int, int> referenceCountByTextureId = new ConcurrentDictionary<int, int>();

        /// <summary>
        /// Texture IDs will not be deleted while there is still a reference to texture with that ID.
        /// There is no guarantee of when a texture will finally be deleted.
        /// </summary>
        public static void DeleteUnusedTextures()
        {
            HashSet<int> deletedTextureIds = FindIdsWithNoReferences();

            // Remove any IDs with no more references.
            foreach (int id in deletedTextureIds)
            {
                int value;
                referenceCountByTextureId.TryRemove(id, out value);
            }
        }

        private static HashSet<int> FindIdsWithNoReferences()
        {
            HashSet<int> deletedTextureIds = new HashSet<int>();
            foreach (var texture in referenceCountByTextureId)
            {
                if (texture.Value == 0)
                {
                    GL.DeleteTexture(texture.Key);
                    deletedTextureIds.Add(texture.Key);
                }
            }

            return deletedTextureIds;
        }

        /// <summary>
        /// The value generated by GL.GenTexture(). Do not attempt to bind this when the object has gone out of scope.
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// 
        /// </summary>
        protected TextureTarget textureTarget = TextureTarget.Texture2D;

        /// <summary>
        /// 
        /// </summary>
        public PixelInternalFormat PixelInternalFormat { get; }

        /// <summary>
        /// Binds and updates the TextureParameter when set.
        /// </summary>
        public TextureMinFilter MinFilter
        {
            get { return minFilter; }
            set
            {
                Bind();
                minFilter = value;
                GL.TexParameter(textureTarget, TextureParameterName.TextureMinFilter, (int)value);
            }
        }
        private TextureMinFilter minFilter;

        /// <summary>
        /// Binds and updates the TextureParameter when set.
        /// </summary>
        public TextureMagFilter MagFilter
        {
            get { return magFilter; }
            set
            {
                Bind();
                magFilter = value;
                GL.TexParameter(textureTarget, TextureParameterName.TextureMagFilter, (int)value);
            }
        }
        private TextureMagFilter magFilter;

        /// <summary>
        /// Binds and updates the TextureParameter when set.
        /// </summary>
        public TextureWrapMode TextureWrapS
        {
            get { return textureWrapS; }
            set
            {
                Bind();
                textureWrapS = value;
                GL.TexParameter(textureTarget, TextureParameterName.TextureWrapS, (int)value);
            }
        }
        private TextureWrapMode textureWrapS;

        /// <summary>
        /// Binds and updates the TextureParameter when set.
        /// </summary>
        public TextureWrapMode TextureWrapT
        {
            get { return textureWrapT; }
            set
            {
                Bind();
                textureWrapT = value;
                GL.TexParameter(textureTarget, TextureParameterName.TextureWrapT, (int)value);
            }
        }
        private TextureWrapMode textureWrapT;

        /// <summary>
        /// Binds and updates the TextureParameter when set.
        /// </summary>
        public TextureWrapMode TextureWrapR
        {
            get { return textureWrapR; }
            set
            {
                Bind();
                textureWrapR = value;
                GL.TexParameter(textureTarget, TextureParameterName.TextureWrapR, (int)value);
            }
        }
        private TextureWrapMode textureWrapR;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="target"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="pixelInternalFormat"></param>
        public Texture(TextureTarget target, int width, int height, PixelInternalFormat pixelInternalFormat = PixelInternalFormat.Rgba)
        {
            // These should only be set once at object creation.
            Id = GL.GenTexture();
            IncrementReferenceCountForId();

            textureTarget = target;
            PixelInternalFormat = pixelInternalFormat;

            Bind();

            // The GL texture needs to be updated in addition to initializing the variables.
            TextureWrapS = TextureWrapMode.ClampToEdge;
            TextureWrapT = TextureWrapMode.ClampToEdge;
            TextureWrapR = TextureWrapMode.ClampToEdge;
            MinFilter = TextureMinFilter.NearestMipmapLinear;
            MagFilter = TextureMagFilter.Linear;

            // Setup the format and mip maps.
            GL.TexImage2D(textureTarget, 0, PixelInternalFormat, width, height, 0, OpenTK.Graphics.OpenGL.PixelFormat.Rgba, PixelType.Float, IntPtr.Zero);
            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
        }

        private void IncrementReferenceCountForId()
        {
            if (referenceCountByTextureId.ContainsKey(Id))
                referenceCountByTextureId[Id] += 1;
            else
                referenceCountByTextureId.TryAdd(Id, 1);
        }

        /// <summary>
        /// The context probably isn't current here, so any GL function will crash. The texture will need to be cleaned up later. 
        /// </summary>
        ~Texture()
        {
            if (referenceCountByTextureId.ContainsKey(Id))
            {
                if (referenceCountByTextureId[Id] > 0)
                    referenceCountByTextureId[Id] -= 1;
            }
        }

        /// <summary>
        /// Binds the Id to the specified target at creation.
        /// </summary>
        public void Bind()
        {
            GL.BindTexture(textureTarget, Id);
        }
    }
}
