using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects.Textures
{
    /// <summary>
    /// A <see cref="Texture"/> class for TextureTarget.Texture2D textures. 
    /// Provides constructors to initialize the image data from bitmaps or byte arrays in the specified PixelInternalFormat.
    /// </summary>
    public class Texture2D : Texture
    {
        /// <summary>
        /// The width of the base mip level in pixels.
        /// </summary>
        public int Width { get; }

        /// <summary>
        /// The height of the base mip level in pixels.
        /// </summary>
        public int Height { get; }

        /// <summary>
        /// Initialize an empty Texture2D of the specified dimensions.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="pixelInternalFormat">The internal format for the texture</param>
        public Texture2D(int width, int height, PixelInternalFormat pixelInternalFormat = PixelInternalFormat.Rgba) : 
            base(TextureTarget.Texture2D, pixelInternalFormat)
        {
            Width = width;
            Height = height;
        }

        /// <summary>
        /// Initialize an RGBA texture from the specified bitmap.
        /// </summary>
        /// <param name="image"></param>
        public Texture2D(Bitmap image) : base(TextureTarget.Texture2D)
        {
            Width = image.Width;
            Height = image.Height;

            // Load the image data.
            BitmapData data = image.LockBits(new Rectangle(0, 0, image.Width, image.Height),
                ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            GL.TexImage2D(textureTarget, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0,
                OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
            image.UnlockBits(data);

            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
        }

        /// <summary>
        /// Initializes a texture of the specified format and loads all specified mipmaps.
        /// <paramref name="imageSize"/> is usually <paramref name="mipmaps"/>[0].Length.
        /// This doesn't always work and is being investigated.
        /// </summary>
        /// <param name="width">The width of the base mip level</param>
        /// <param name="height">The height of the base mip level</param>
        /// <param name="mipmaps">A list of byte arrays for each mip level</param>
        /// <param name="loadMipmaps">When <c>true</c>, the mip levels are loaded from <paramref name="mipmaps"/>. 
        /// Otherwise, the mipmaps are generated by OpenGL. The number generated is based on the length of <paramref name="mipmaps"/>.</param>
        /// <param name="internalFormat"></param>
        /// 
        public Texture2D(int width, int height, List<byte[]> mipmaps, bool loadMipmaps, InternalFormat internalFormat) : base(TextureTarget.Texture2D)
        {
            Width = width;
            Height = height;

            Bind();

            // Calculate the proper imageSize.
            int baseImageSize = CalculateImageSize(Width, Height, internalFormat);

            // Load the first level.
            GL.CompressedTexImage2D<byte>(TextureTarget.Texture2D, 0, internalFormat, width, height, 0, baseImageSize, mipmaps[0]);

            if (loadMipmaps)
            {
                // The number of mip maps needs to be specified first.
                GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMaxLevel, mipmaps.Count);
                GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);

                // Initialize the data for each level.
                for (int mipLevel = 0; mipLevel < mipmaps.Count; mipLevel++)
                {
                    int mipWidth = width / (int)Math.Pow(2, mipLevel);
                    int mipHeight = height / (int)Math.Pow(2, mipLevel);
                    int mipImageSize = CalculateImageSize(mipWidth, mipHeight, internalFormat);
                    GL.CompressedTexImage2D(TextureTarget.Texture2D, mipLevel, internalFormat,
                        mipWidth, mipHeight, 0, mipImageSize, mipmaps[mipLevel]);
                }
            }
            else
            {
                GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMaxLevel, 0);
                GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
            }
        }

        private int CalculateImageSize(int width, int height, InternalFormat pixelInternalFormat)
        {
            int blockSize = 16; // DXT3/DXT5
            if (pixelInternalFormat == InternalFormat.CompressedRgbaS3tcDxt1Ext)
                blockSize = 8;

            int imageSize = blockSize * (int)Math.Ceiling(width / 4.0) * (int)Math.Ceiling(height / 4.0);
            return imageSize;
        }
    }
}
