using System;
using System.Collections.Generic;
using System.Drawing;
using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects.Textures
{
    /// <summary>
    /// A <see cref="Texture"/> class for TextureTarget.Texture2D textures that
    /// provides constructors to initialize the image data from bitmaps or byte arrays 
    /// in the specified image format. 
    /// <para></para><para></para>
    /// The texture data can be compressed, uncompressed, or a <see cref="Bitmap"/> object.
    /// </summary>
    public class Texture2D : Texture
    {
        /// <summary>
        /// The width of the base mip level in pixels.
        /// </summary>
        public int Width { get; }

        /// <summary>
        /// The height of the base mip level in pixels.
        /// </summary>
        public int Height { get; }

        /// <summary>
        /// Initialize an empty Texture2D of the specified dimensions.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="pixelInternalFormat">The internal format for the texture</param>
        public Texture2D(int width, int height, PixelInternalFormat pixelInternalFormat = PixelInternalFormat.Rgba) : 
            base(TextureTarget.Texture2D)
        {
            Width = width;
            Height = height;
        }

        /// <summary>
        /// Initialize an RGBA texture from the specified bitmap.
        /// </summary>
        /// <param name="image"></param>
        public Texture2D(Bitmap image) : base(TextureTarget.Texture2D)
        {
            Width = image.Width;
            Height = image.Height;

            LoadBaseLevelFromBitmap(image);
            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
        }

        private void LoadBaseLevelFromBitmap(Bitmap image)
        {
            // Load the image data.
            System.Drawing.Imaging.BitmapData data = image.LockBits(new Rectangle(0, 0, image.Width, image.Height),
                System.Drawing.Imaging.ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            GL.TexImage2D(textureTarget, 0, PixelInternalFormat.Rgba, data.Width, data.Height, 0,
                PixelFormat.Bgra, PixelType.UnsignedByte, data.Scan0);
            image.UnlockBits(data);
        }

        /// <summary>
        /// Initializes a texture of the specified format and initializes the first mip level.
        /// Mipmaps are autogenerated with a max level of <paramref name="mipCount"/>
        /// </summary>
        /// <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="baseMipLevel"></param>
        /// <param name="mipCount">The number of mipmaps to generate</param>
        /// <param name="internalFormat">The image format of <paramref name="baseMipLevel"/></param>
        public Texture2D(int width, int height, byte[] baseMipLevel, int mipCount, InternalFormat internalFormat) 
            : base(TextureTarget.Texture2D)
        {
            Width = width;
            Height = height;

            Bind();

            LoadBaseLevelGenerateMipMaps(width, height, baseMipLevel, mipCount, internalFormat);
        }

        /// <summary>
        /// Initializes an uncompressed texture of the specified format 
        /// and initializes the first mip level.
        /// Mipmaps are autogenerated with a max level of <paramref name="mipCount"/>
        /// </summary>
        /// <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="baseMipLevel"></param>
        /// <param name="mipCount">The number of mipmaps to generate</param>
        /// <param name="pixelInternalFormat"></param>
        /// <param name="pixelFormat"></param>
        /// <param name="pixelType"></param>
        /// <exception cref="ArgumentException"><paramref name="pixelInternalFormat"/> is a compressed format.</exception>
        public Texture2D(int width, int height, byte[] baseMipLevel, int mipCount,
            PixelInternalFormat pixelInternalFormat, PixelFormat pixelFormat, PixelType pixelType) 
            : base(TextureTarget.Texture2D)
        {
            if (TextureFormatTools.IsCompressed(pixelInternalFormat))
                throw new ArgumentException(TextureExceptionMessages.formatShouldNotBeCompressed);

            Width = width;
            Height = height;

            Bind();

            LoadBaseLevelGenerateMipMaps(width, height, baseMipLevel, mipCount, pixelInternalFormat, 
                pixelFormat, pixelType);
        }

        /// <summary>
        /// Initializes a compressed texture of the specified format 
        /// and loads all mipmaps from <paramref name="mipmaps"/>.
        /// </summary>
        /// <param name="width">The width of the base mip level</param>
        /// <param name="height">The height of the base mip level</param>
        /// <param name="mipmaps">A list of byte arrays for each mip level</param>
        /// <param name="internalFormat">The image format of <paramref name="mipmaps"/></param>
        /// <exception cref="ArgumentException"><paramref name="internalFormat"/> is not a compressed format.</exception>
        public Texture2D(int width, int height, List<byte[]> mipmaps, InternalFormat internalFormat) 
            : this(width, height, mipmaps[0], mipmaps.Count, internalFormat)
        {
            if (!TextureFormatTools.IsCompressed(internalFormat))
                throw new ArgumentException(TextureExceptionMessages.formatShouldBeCompressed);

            MipmapLoading.LoadCompressedMipMaps(TextureTarget.Texture2D, width, height, mipmaps, internalFormat);
        }

        private void LoadBaseLevelGenerateMipMaps(int width, int height, byte[] baseMipLevel, 
            int mipCount, InternalFormat internalFormat)
        {
            // Calculate the proper imageSize.
            int baseImageSize = TextureFormatTools.CalculateImageSize(Width, Height, internalFormat);

            // Load the first level.
            GL.CompressedTexImage2D<byte>(TextureTarget.Texture2D, 0, internalFormat, width, height, 0, baseImageSize, baseMipLevel);

            // The number of mip maps needs to be specified first.
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMaxLevel, mipCount);
            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
        }

        private void LoadBaseLevelGenerateMipMaps(int width, int height, byte[] baseMipLevel, int mipCount, 
            PixelInternalFormat pixelInternalFormat, PixelFormat pixelFormat, PixelType pixelType)
        {
            // Load the first level.
            GL.TexImage2D(TextureTarget.Texture2D, 0, pixelInternalFormat, width, height, 0, 
                pixelFormat, pixelType, baseMipLevel);

            // The number of mip maps needs to be specified first.
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMaxLevel, mipCount);
            GL.GenerateMipmap(GenerateMipmapTarget.Texture2D);
        }
    }
}
