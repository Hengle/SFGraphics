using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects
{
    /// <summary>
    /// Manages reference counting and resource management for all GLObjects. 
    /// Each GLObject has an integer ID generated by OpenTK. When an object is created, the reference count for that ID is incremented.
    /// When the finalizer is called for an object, the reference count is decremented. 
    /// <para></para> <para></para>
    /// <see cref="GLObjectManager"/> will maintain reference counts for <see cref="Shaders.Shader"/> or any class inheriting from <see cref="Textures.Texture"/>,
    /// <see cref="BufferObject"/>, or <see cref="Framebuffer"/>.
    /// <para></para>
    /// Call <see cref="DeleteUnusedGLObjects"/> with a valid OpenTK context current to delete objects with no references.
    /// The reference count is managed automatically, so there is no need to call GL.DeleteTexture(int), for example.
    /// </summary>
    public static class GLObjectManager
    {
        // Use internal methods/variables so people can't mess this up.
        internal static ConcurrentDictionary<int, int> referenceCountByTextureId = new ConcurrentDictionary<int, int>();
        internal static ConcurrentDictionary<int, int> referenceCountByBufferId = new ConcurrentDictionary<int, int>();
        internal static ConcurrentDictionary<int, int> referenceCountByProgramId = new ConcurrentDictionary<int, int>();
        internal static ConcurrentDictionary<int, int> referenceCountByFramebufferId = new ConcurrentDictionary<int, int>();

        /// <summary>
        /// The appropriate GL.Delete() function is called for all GLObjects if the <c>ID</c> has 0 references.
        /// This means GLObjects may not be cleaned up until long after the original object becomes unreachable.
        /// <para>
        /// Call <see cref="GC.WaitForPendingFinalizers"/> prior to <see cref="DeleteUnusedGLObjects"/> if more 
        /// immediate cleanup is desired.
        /// </para>
        /// </summary>
        public static void DeleteUnusedGLObjects()
        {
            DeleteUnusedObjects(referenceCountByTextureId, GL.DeleteTexture);
            DeleteUnusedObjects(referenceCountByBufferId, GL.DeleteBuffer);
            DeleteUnusedObjects(referenceCountByProgramId, GL.DeleteProgram);
            DeleteUnusedObjects(referenceCountByFramebufferId, GL.DeleteFramebuffer);
        }

        private static void DeleteUnusedObjects(ConcurrentDictionary<int, int> referenceCountById, Action<int> glDeleteFunction)
        {
            HashSet<int> idsReadyForDeletion = ReferenceCounting.FindIdsWithNoReferences(referenceCountById);

            // Remove and delete associated data for IDs with no more references.
            foreach (int id in idsReadyForDeletion)
            {
                int value;
                if (referenceCountById.TryRemove(id, out value))
                {
                    glDeleteFunction(id);
                }
            }
        }
    }
}
