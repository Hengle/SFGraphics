using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects.Shaders.Utils
{
    internal static class ShaderValidation
    {
        /// <summary>
        /// Returns <c>true</c> if the program linked successfully.
        /// </summary>
        /// <param name="programId">The program ID generated by OpenGL</param>
        /// <returns><c>true</c> if the program linked successfully</returns>
        public static bool GetProgramLinkStatus(int programId)
        {
            // 1: linked successfully, 0: linker errors
            GL.GetProgram(programId, GetProgramParameterName.LinkStatus, out int linkStatus);
            return linkStatus != 0;
        }

        /// <summary>
        /// Returns <c>true</c> if the program status is valid for rendering.
        /// </summary>
        /// <param name="programId">The program ID generated by OpenGL</param>
        /// <returns><c>true</c> if the program status is valid for rendering</returns>
        public static bool GetProgramValidateStatus(int programId)
        {
            // 1: valid, 0: not valid
            GL.ValidateProgram(programId);
            GL.GetProgram(programId, GetProgramParameterName.ValidateStatus, out int validateStatus);
            return validateStatus != 0;
        }

        public static bool GetShaderObjectCompileStatus(int shaderId)
        {
            // 1: compiled successfully, 0: errors in compilation.
            GL.GetShader(shaderId, ShaderParameter.CompileStatus, out int compileStatus);
            return compileStatus != 0;
        }
    }
}
