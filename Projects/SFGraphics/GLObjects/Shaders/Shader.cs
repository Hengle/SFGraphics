using System;
using System.Collections.Generic;
using OpenTK;
using OpenTK.Graphics.OpenGL;


namespace SFGraphics.GLObjects.Shaders
{
    /// <summary>
    /// Encapsulates a shader program and attached shaders. 
    /// Errors are stored to an internal log, which can be exported with <see cref="GetErrorLog"/>.
    /// <para></para> <para></para>
    /// Ensure that <see cref="ProgramCreatedSuccessfully"/> returns <c>true</c> before rendering to avoid crashes.
    /// </summary>
    public sealed partial class Shader : IGLObject
    {
        /// <summary>
        /// The ID generated by GL.CreateProgram().
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// <c>true</c> when the link status is ok and all attached shaders compiled.
        /// If <c>false</c>, rendering with this shader will most likely cause an <see cref="AccessViolationException"/>.
        /// <para></para><para></para>
        /// The status is updated with each call to <see cref="LoadShader(string, ShaderType, string)"/> or
        /// <see cref="AttachShader(int, ShaderType)"/>.
        /// </summary>
        public bool ProgramCreatedSuccessfully
        {
            get { return programCreatedSuccessfully; }
        }
        private bool programCreatedSuccessfully = false;


        private ShaderLog errorLog = new ShaderLog();

        // Vertex Attributes and Uniforms
        int activeUniformCount = 0;
        int activeAttributeCount = 0;
        private Dictionary<string, int> vertexAttributeAndUniformLocations = new Dictionary<string, int>();

        // Used to check for type mismatches when setting attributes and uniforms.
        private Dictionary<string, ActiveUniformType> activeUniformTypesByName = new Dictionary<string, ActiveUniformType>();
        private Dictionary<string, ActiveAttribType> activeAttribTypesByName = new Dictionary<string, ActiveAttribType>();

        // Write these names to the error log later rather than throwing an exception.
        private HashSet<string> invalidUniformNames = new HashSet<string>();
        private Dictionary<string, ActiveUniformType> invalidUniformTypes = new Dictionary<string, ActiveUniformType>();

        /// <summary>
        /// Initializes the programID. Attach and compile shaders with LoadShader() before using.
        /// </summary>
        public Shader()
        {
            Id = GL.CreateProgram();
            ReferenceCounting.AddReference(GLObjectManager.referenceCountByProgramId, Id);
            errorLog.AppendHardwareAndVersionInfo();
        }

        /// <summary>
        /// Decrement the reference count for <see cref="Id"/>. 
        /// The context probably isn't current, so the data is deleted later by <see cref="GLObjectManager"/>.
        /// </summary>
        ~Shader()
        {
            ReferenceCounting.RemoveReference(GLObjectManager.referenceCountByProgramId, Id);
        }

        /// <summary>
        /// Use this shader program's program ID for rendering.
        /// </summary>
        public void UseProgram()
        {
            GL.UseProgram(Id);
        }

        /// <summary>
        /// Gets the index of the vertex attribute or uniform variable. Returns -1 if not found.
        /// </summary>
        /// <param name="name">The name of the vertex attribute or uniform</param>
        /// <returns>The index of the attribute/uniform or -1 if not found </returns>
        public int GetVertexAttributeUniformLocation(string name)
        {
            int value;
            if (vertexAttributeAndUniformLocations.TryGetValue(name, out value))
            {
                return value;
            }
            else
                return -1;
        }

        /// <summary>
        /// Enables the vertex attribute arrays for all active attributes.
        /// Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
        /// </summary>
        public void EnableVertexAttributes()
        {
            // Only enable the necessary vertex attributes.
            // Enabling extra vertex attributes crashes on Nvidia.
            for (int location = 0; location < activeAttributeCount; location++)
            {
                GL.EnableVertexAttribArray(location);
            }
        }

        /// <summary>
        /// Disables the vertex attribute arrays for all active attributes.
        /// Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
        /// </summary>
        public void DisableVertexAttributes()
        {
            // Disable all the vertex attributes. This could be used with a VAO in the future.
            for (int location = 0; location < activeAttributeCount; location++)
            {
                GL.DisableVertexAttribArray(location);
            }
        }

        /// <summary>
        /// Attaches <paramref name="shaderId"/> and links the program. 
        /// The value returned by <see cref="ProgramCreatedSuccessfully"/> is updated.
        /// </summary>
        /// <param name="shaderId">The integer ID returned by <see cref="CreateGlShader(string, ShaderType)"/></param>
        /// <param name="shaderType">Supported types are ShaderType.FragmentShader, ShaderType.VertexShader, or ShaderType.GeometryShader</param>
        public void AttachShader(int shaderId, ShaderType shaderType)
        {
            GL.AttachShader(Id, shaderId);
            GL.LinkProgram(Id);

            programCreatedSuccessfully = CheckProgramStatus();

            // Scary things happen if we do this after a linking error.
            if (programCreatedSuccessfully)
            {
                LoadAttributes();
                LoadUniforms();
            }
        }

        /// <summary>
        /// Returns the integer ID created by GL.CreateShader(). Compiles the shader.
        /// This method can reduce load times by avoiding redundant shader compilations when used
        /// in conjunction with <see cref="AttachShader(int, ShaderType)"/>
        /// </summary>
        /// <param name="shaderSource">A string containing the shader source text</param>
        /// <param name="shaderType">Supported types are ShaderType.FragmentShader, ShaderType.VertexShader, or ShaderType.GeometryShader</param>
        /// <returns></returns>
        public static int CreateGlShader(string shaderSource, ShaderType shaderType)
        {
            int id = GL.CreateShader(shaderType);
            GL.ShaderSource(id, shaderSource);
            GL.CompileShader(id);
            return id;
        }

        /// <summary>
        /// Attempts to compile and attach the shader. 
        /// The value returned by <see cref="ProgramCreatedSuccessfully"/> is updated.
        /// Supported shader types are fragment, vertex , and geometry.
        /// </summary>
        /// <param name="shaderSource">A string containing the shader source text</param>
        /// <param name="shaderType">The type of shader to load. Ex: ShaderType.FragmentShader</param>
        /// <param name="shaderName">The title used for the compilation errors section of the error log</param>
        public void LoadShader(string shaderSource, ShaderType shaderType, string shaderName = "Shader")
        {
            // Compile and attach before linking.
            int shaderId = LoadShaderBasedOnType(shaderSource, shaderType);
            AppendShaderCompilationErrors(shaderName, shaderId);
            GL.LinkProgram(Id);

            // Some errors may not appear until all shaders are loaded.
            programCreatedSuccessfully = CheckProgramStatus();

            // The shader won't be deleted until the program is deleted.
            GL.DeleteShader(shaderId);

            // Scary things happen if we do this after a linking error.
            if (programCreatedSuccessfully)
            {
                LoadAttributes();
                LoadUniforms();
            }
        }

        private void AddVertexAttribute(string name, ActiveAttribType activeAttribType)
        {
            // Overwrite existing vertex attributes.
            if (vertexAttributeAndUniformLocations.ContainsKey(name))
                vertexAttributeAndUniformLocations.Remove(name);
            int position = GL.GetAttribLocation(Id, name);
            vertexAttributeAndUniformLocations.Add(name, position);

            if (activeAttribTypesByName.ContainsKey(name))
                activeAttribTypesByName.Remove(name);
            activeAttribTypesByName.Add(name, activeAttribType);
        }

        private void AddUniform(string name, ActiveUniformType activeUniformType)
        {
            // Overwrite existing uniforms.
            if (vertexAttributeAndUniformLocations.ContainsKey(name))
                vertexAttributeAndUniformLocations.Remove(name);
            int position = GL.GetUniformLocation(Id, name);
            vertexAttributeAndUniformLocations.Add(name, position);

            if (activeUniformTypesByName.ContainsKey(name))
                activeUniformTypesByName.Remove(name);
            activeUniformTypesByName.Add(name, activeUniformType);
        }

        private void LoadUniforms()
        {
            GL.GetProgram(Id, GetProgramParameterName.ActiveUniforms, out activeUniformCount);

            for (int i = 0; i < activeUniformCount; i++)
            {
                // Ignore invalid uniforms. 0 is "None" for type.
                ActiveUniformType uniformType;
                int uniformSize;
                string uniform = GL.GetActiveUniform(Id, i, out uniformSize, out uniformType);
                if (uniformType != 0)
                {
                    AddUniform(uniform, uniformType);
                }
            }
        }

        private void LoadAttributes()
        {
            GL.GetProgram(Id, GetProgramParameterName.ActiveAttributes, out activeAttributeCount);

            for (int i = 0; i < activeAttributeCount; i++)
            {
                // Ignore invalid attributes.
                ActiveAttribType attributeType;
                int attributeSize;
                string attribute = GL.GetActiveAttrib(Id, i, out attributeSize, out attributeType);
                if (attributeType != ActiveAttribType.None)
                {
                    AddVertexAttribute(attribute, attributeType);
                }
            }
        }

        private int LoadShaderBasedOnType(string shaderSource, ShaderType shaderType)
        {
            // Returns the shader Id that was generated.
            int id = AttachAndCompileShader(shaderSource, shaderType, Id);
            return id;
        }

        private int AttachAndCompileShader(string shaderText, ShaderType type, int program)
        {
            int id = CreateGlShader(shaderText, type);
            GL.AttachShader(program, id);
            return id;
        }
    }
}

