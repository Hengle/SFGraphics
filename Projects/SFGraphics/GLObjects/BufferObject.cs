using System;
using OpenTK.Graphics.OpenGL;


namespace SFGraphics.GLObjects
{
    /// <summary>
    /// Encapsulates an OpenGL buffer object. Like other GLOBjects, memory is handled by GLObjectManager.
    /// </summary>
    public sealed class BufferObject : IGLObject
    {
        /// <summary>
        /// The value generated by GL.GenBuffer(). Do not attempt to bind <see cref="Id"/> when the object has become unreachable.
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// The target to which the buffer is bound when calling Bind().
        /// </summary>
        public BufferTarget BufferTarget { get { return bufferTarget; } }
        private BufferTarget bufferTarget;

        /// <summary>
        /// Creates and binds an empty buffer of the specified target.
        /// </summary>
        /// <param name="bufferTarget">The target to which <see cref="Id"/> is bound</param>
        public BufferObject(BufferTarget bufferTarget)
        {
            Id = GL.GenBuffer();
            ReferenceCounting.AddReference(GLObjectManager.referenceCountByBufferId, Id);
            this.bufferTarget = bufferTarget;
            GL.BindBuffer(BufferTarget, Id);
        }

        /// <summary>
        /// Decrement the reference count for <see cref="Id"/>. The context probably isn't current, so the data is deleted later by <see cref="GLObjectManager"/>.
        /// </summary>
        ~BufferObject()
        {
            ReferenceCounting.RemoveReference(GLObjectManager.referenceCountByBufferId, Id);
        }

        /// <summary>
        /// Binds the buffer to the target specified at creation.
        /// </summary>
        public void Bind()
        {
            GL.BindBuffer(BufferTarget, Id);
        }

        /// <summary>
        /// Initializes the buffer's data with the specified array.
        /// <paramref name="data"/> should be contiguous in memory, so only 
        /// non nullable structs containing value types as members will work properly.
        /// </summary>
        /// <typeparam name="T">The type of each item. This includes arithmetic types like <see cref="int"/>.</typeparam>
        /// <param name="data">The data used to initialize the buffer's data</param>
        /// <param name="itemSizeInBytes">The size of <typeparamref name="T"/> in bytes</param>
        /// <param name="bufferUsageHint">A hint on how the data will be used, which allows performance optimizations</param>
        public void BufferData<T>(T[] data, int itemSizeInBytes, BufferUsageHint bufferUsageHint) where T : struct
        {
            Bind();
            GL.BufferData(bufferTarget, itemSizeInBytes * data.Length, data, bufferUsageHint);
        }
    }
}
