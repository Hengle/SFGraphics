using System;
using System.Collections.Generic;
using System.Drawing;
using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects.Textures
{
    /// <summary>
    /// Provides methods for TextureTarget.Texture2D textures to load compressed or uncompressed 
    /// image data from bitmaps or arrays of any value type. 
    /// <para></para><para></para>
    /// Textures are incomplete until their dimensions and format are set.
    /// </summary>
    public class Texture2D : Texture
    {
        /// <summary>
        /// The width of the base mip level in pixels.
        /// </summary>
        public int Width { get; private set; }

        /// <summary>
        /// The height of the base mip level in pixels.
        /// </summary>
        public int Height { get; private set; }

        /// <summary>
        /// Creates an empty 2D texture. 
        /// The texture is incomplete until the dimensions, format, and image data are set.
        /// </summary>
        public Texture2D() : base(TextureTarget.Texture2D)
        {

        }

        /// <summary>
        /// Initialize an RGBA texture with mipmaps generated from the specified bitmap.
        /// Binds the texture.
        /// </summary>
        /// <param name="image">the bitmap used to load uncompressed image data</param>
        public void LoadImageData(Bitmap image)
        {
            Width = image.Width;
            Height = image.Height;

            Bind();
            MipmapLoading.LoadBaseLevelGenerateMipmaps(TextureTarget, image);
        }

        /// <summary>
        /// Initializes a texture of the specified format and initializes the first mip level.
        /// Mipmaps are autogenerated with a max level of <paramref name="mipCount"/>
        /// </summary>
        /// <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="baseMipLevel">The image data to load for the first mip level. The other levels are generated.</param>
        /// <param name="mipCount">The number of mipmaps to generate</param>
        /// <param name="internalFormat">The image format of <paramref name="baseMipLevel"/></param>
        public void LoadImageData<T>(int width, int height, T[] baseMipLevel, int mipCount, InternalFormat internalFormat)
            where T : struct
        {
            Width = width;
            Height = height;

            Bind();
            MipmapLoading.LoadBaseLevelGenerateMipmaps(TextureTarget, width, height, baseMipLevel, mipCount, internalFormat);
        }

        /// <summary>
        /// Initializes an uncompressed texture of the specified format 
        /// and initializes the first mip level.
        /// Mipmaps are autogenerated with a max level of <paramref name="mipCount"/>
        /// </summary>
        /// <param name="width">The width of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="height">The height of <paramref name="baseMipLevel"/> in pixels</param>
        /// <param name="baseMipLevel">The image data to load for the first mip level. The other levels are generated.</param>
        /// <param name="mipCount">The number of mipmaps to generate</param>
        /// <param name="textureFormat">The format information for the uncompressed format</param>
        public void LoadImageData<T>(int width, int height, T[] baseMipLevel, int mipCount, TextureFormatUncompressed textureFormat)
            where T : struct
        {
            Width = width;
            Height = height;

            Bind();
            MipmapLoading.LoadBaseLevelGenerateMipmaps(TextureTarget, width, height, baseMipLevel, mipCount, textureFormat);
        }

        /// <summary>
        /// Initializes a compressed texture of the specified format 
        /// and loads all mipmaps from <paramref name="mipmaps"/>.
        /// </summary>
        /// <param name="width">The width of the base mip level</param>
        /// <param name="height">The height of the base mip level</param>
        /// <param name="mipmaps">A list of byte arrays for each mip level</param>
        /// <param name="internalFormat">The image format of <paramref name="mipmaps"/></param>
        /// <exception cref="ArgumentException"><paramref name="internalFormat"/> is not a compressed format.</exception>
        public void LoadImageData<T>(int width, int height, List<T[]> mipmaps, InternalFormat internalFormat)
            where T : struct
        {
            if (!TextureFormatTools.IsCompressed(internalFormat))
                throw new ArgumentException(TextureExceptionMessages.expectedCompressed);

            MipmapLoading.LoadCompressedMipMaps(TextureTarget.Texture2D, width, height, mipmaps, internalFormat);
        }
    }
}
