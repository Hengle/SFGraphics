using OpenTK.Graphics.OpenGL;

namespace SFGraphics.GLObjects
{
    /// <summary>
    /// Encapsulates an OpenGL vertex array object. Vertex array objects cannot be shared between contexts.
    /// </summary>
    public class VertexArrayObject : IGLObject
    {
        /// <summary>
        /// The value generated by GL.GenVertexArray(). 
        /// Do not attempt to bind <see cref="Id"/> when the object has become unreachable.
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// Creates an empty vertex array object.
        /// The vertex array object must first be bound with <see cref="Bind"/>.
        /// </summary>
        public VertexArrayObject()
        {
            Id = GL.GenVertexArray();
            ReferenceCounting.AddReference(GLObjectManager.referenceCountByRenderbufferId, Id);
        }

        /// <summary>
        /// Decrement the reference count for <see cref="Id"/>. 
        /// The context probably isn't current, 
        /// so the data is deleted later by <see cref="GLObjectManager"/>.
        /// </summary>
        ~VertexArrayObject()
        {
            ReferenceCounting.RemoveReference(GLObjectManager.referenceCountByRenderbufferId, Id);
        }

        /// <summary>
        /// Binds the vertex array <see cref="Id"/>.
        /// </summary>
        public void Bind()
        {
            GL.BindVertexArray(Id);
        }

        /// <summary>
        /// Binds the default vertex array value of 0.
        /// </summary>
        public void Unbind()
        {
            GL.BindVertexArray(0);
        }
    }
}
