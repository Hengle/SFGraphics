using System;

namespace SFGraphics.GLObjects
{
    /// <summary>
    /// 
    /// </summary>
    public abstract class GLObject
    {
        /// <summary>
        /// 
        /// </summary>
        public enum GLObjectType
        {
            /// <summary>
            /// <see cref="SFGraphics.GLObjects.Framebuffer"/>
            /// </summary>
            Framebuffer,

            /// <summary>
            /// <see cref="SFGraphics.GLObjects.Renderbuffer"/>
            /// </summary>
            Renderbuffer,

            /// <summary>
            /// <see cref="SFGraphics.GLObjects.Textures.Texture"/>
            /// </summary>
            Texture,

            /// <summary>
            /// <see cref="SFGraphics.GLObjects.Shaders.Shader"/>
            /// </summary>
            Program,

            /// <summary>
            /// <see cref="BufferObject"/>
            /// </summary>
            Buffer,

            /// <summary>
            /// <see cref="VertexArrayObject"/>
            /// </summary>
            VertexArray
        }

        /// <summary>
        /// The value generated by GL.GenTexture(), GL.GenProgram(), etc. 
        /// Do not attempt to use <see cref="GLObject.Id"/> when the container object has become unreachable.
        /// </summary>
        public readonly int Id;

        /// <summary>
        /// 
        /// </summary>
        public abstract GLObjectType ObjectType { get; }

        /// <summary>
        /// 
        /// </summary>
        public GLObject(int id)
        {
            // We need a constructor to set the readonly field and preserve polymorphic behavior.
            Id = id;
            ReferenceCounting.AddReference(GLObjectManager.referenceCountByGLObject, new Tuple<GLObjectType, int>(ObjectType, Id));
            System.Diagnostics.Debug.WriteLine($"Type { ObjectType }, ID: { Id } References: { GLObjectManager.referenceCountByGLObject[new Tuple<GLObjectType, int>(ObjectType, Id)] }");
        }

        /// <summary>
        /// 
        /// </summary>
        ~GLObject()
        {
            ReferenceCounting.RemoveReference(GLObjectManager.referenceCountByGLObject, new Tuple<GLObjectType, int>(ObjectType, Id));
            System.Diagnostics.Debug.WriteLine($"Type { ObjectType }, ID: { Id } References: { GLObjectManager.referenceCountByGLObject[new Tuple<GLObjectType, int>(ObjectType, Id)] }");
        }
    }
}
