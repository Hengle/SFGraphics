using System;
using System.Collections.Generic;
using OpenTK.Graphics.OpenGL;
using SFGraphics.GLObjects.Textures;

namespace SFGraphics.GLObjects
{
    /// <summary>
    /// Encapsulates a renderbuffer object, which are used exclusively as attachments 
    /// for <see cref="Framebuffer"/> objects. Renderbuffers support multisampling.
    /// </summary>
    public class Renderbuffer : IGLObject
    {
        /// <summary>
        /// The value generated by GL.GenRenderBuffer(). Do not attempt to bind <see cref="Id"/> when the object has become unreachable.
        /// </summary>
        public int Id { get; }

        /// <summary>
        /// Creates an empty renderbuffer.
        /// </summary>
        public Renderbuffer()
        {
            Id = GL.GenRenderbuffer();
            ReferenceCounting.AddReference(GLObjectManager.referenceCountByRenderbufferId, Id);
        }

        /// <summary>
        /// Decrement the reference count for <see cref="Id"/>. 
        /// The context probably isn't current, 
        /// so the data is deleted later by <see cref="GLObjectManager"/>.
        /// </summary>
        ~Renderbuffer()
        {
            ReferenceCounting.RemoveReference(GLObjectManager.referenceCountByRenderbufferId, Id);
        }

        /// <summary>
        /// Creates an allocates storage for an empty renderbuffer. 
        /// </summary>
        /// <param name="width">The width of the renderbuffer in pixels</param>
        /// <param name="height">The height of the renderbuffer in pixels</param>
        /// <param name="internalFormat">The format of the image data</param>
        public Renderbuffer(int width, int height, RenderbufferStorage internalFormat)
            : this()
        {
            Bind();

            // Allocate storage for the renderbuffer.
            GL.RenderbufferStorage(RenderbufferTarget.Renderbuffer, internalFormat, width, height);
        }

        /// <summary>
        /// Creates and allocates storage for an empty multisampled renderbuffer.
        /// </summary>
        /// <param name="width">The width of the renderbuffer in pixels</param>
        /// <param name="height">The height of the renderbuffer in pixels</param>
        /// <param name="samples">The number of samples to use for multisampling</param>
        /// <param name="internalFormat">The format of the image data</param>
        public Renderbuffer(int width, int height, int samples, RenderbufferStorage internalFormat)
            : this()
        {
            Bind();

            // Allocate storage for the renderbuffer.
            GL.RenderbufferStorageMultisample(RenderbufferTarget.Renderbuffer, samples, 
                internalFormat, width, height);
        }

        /// <summary>
        /// Binds <see cref="Id"/> to the RenderbufferTarget.Renderbuffer target.
        /// </summary>
        public void Bind()
        {
            GL.BindRenderbuffer(RenderbufferTarget.Renderbuffer, Id);
        }

        /// <summary>
        /// 
        /// </summary>
        ~Renderbuffer()
        {
            // TODO: manage reference counts for renderbuffers.
        }
    }
}
